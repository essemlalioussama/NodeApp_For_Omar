{"version":3,"file":"thymeleaf.node.cjs.js","sources":["../source/standard/expressions/AllInput.js","../source/parser/Rule.js","../source/standard/expressions/ThymeleafRule.js","../source/parser/Grammar.js","../source/parser/Operators.js","../source/parser/InputBuffer.js","../source/parser/RegularExpression.js","../source/standard/expressions/ThymeleafExpressionLanguage.js","../source/parser/Parser.js","../source/standard/expressions/ExpressionProcessor.js","../source/processors/AttributeProcessor.js","../source/standard/processors/AttrAttributeProcessor.js","../source/processors/ElementProcessor.js","../source/standard/processors/BlockElementProcessor.js","../source/standard/processors/CheckedAttributeProcessor.js","../source/standard/processors/ClassAppendAttributeProcessor.js","../source/standard/processors/EachAttributeProcessor.js","../source/standard/processors/EmptyableAttributeProcessor.js","../source/standard/processors/FragmentAttributeProcessor.js","../node_modules/@ultraq/dom-utils/dom-utils.es.js","../source/standard/processors/IfAttributeProcessor.js","../source/standard/expressions/FragmentSignatureGrammar.js","../source/utilities/Dom.js","../source/utilities/Fragments.js","../source/standard/processors/InsertAttributeProcessor.js","../source/standard/processors/RemovableAttributeProcessor.js","../source/standard/processors/RemoveAttributeProcessor.js","../source/standard/processors/ReplaceAttributeProcessor.js","../source/utilities/Messages.js","../source/standard/processors/TextAttributeProcessor.js","../source/standard/processors/UnlessAttributeProcessor.js","../source/standard/processors/UTextAttributeProcessor.js","../source/standard/processors/WithAttributeProcessor.js","../source/dialects/Dialect.js","../source/standard/StandardDialect.js","../source/Configurations.js","../source/processors/Matcher.js","../source/utilities/Functions.js","../source/TemplateEngine.js"],"sourcesContent":["/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A special kind of expression that requires the referenced rule consume all\n * available input.\n * \n * @param {String} ruleName\n * @return {Matchable}\n */\nexport const AllInput = ruleName => (input, parser) => {\n\tlet matchResult = parser.parseWithExpression(input, ruleName);\n\treturn matchResult !== null && input.exhausted() ? matchResult : null;\n};\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default processor which returns the result as is.\n * \n * @template T\n * @param {T} result\n * @return {T}\n */\nconst defaultMatchProcessor = result => result;\n\n/**\n * A rule describes a string in the language.\n * \n * @author Emanuel Rabina\n */\nexport default class Rule {\n\n\t/**\n\t * @param {String} name\n\t * @param {Object} expression\n\t * @param {Function} [matchProcessor=defaultMatchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor = defaultMatchProcessor) {\n\n\t\tthis.name           = name;\n\t\tthis.expression     = expression;\n\t\tthis.matchProcessor = matchProcessor;\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this rule.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rule.\n\t */\n\taccept(input, parser) {\n\n\t\tlet {expression, name} = this;\n\t\treturn parser.trackExpression(input, expression, name, () => {\n\t\t\tlet matchResult = parser.parseWithExpression(input, expression);\n\t\t\treturn matchResult !== null ? this.matchProcessor(matchResult) : null;\n\t\t});\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Rule from '../../parser/Rule';\n\n/**\n * A custom rule where the default match processor returns a function to execute\n * against the current context to discover the matched value.\n */\nexport default class ThymeleafRule extends Rule {\n\n\t/**\n\t * @param {String} name\n\t * @param {Object} expression\n\t * @param {Function} [matchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor) {\n\n\t\tconst contextSensitiveMatchProcessor = result => (...args) => {\n\t\t\t// console.log(`Processing rule: ${name}`);\n\t\t\treturn typeof result === 'function' ? result.apply(null, args) : result;\n\t\t};\n\t\tsuper(name, expression, matchProcessor || contextSensitiveMatchProcessor);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of Rules that describes a language.\n * \n * @author Emanuel Rabina\n */\nexport default class Grammar {\n\n\t/**\n\t * @param {String} name\n\t * @param {Rule} startingRule\n\t * @param {...Rule} additionalRules\n\t */\n\tconstructor(name, startingRule, ...additionalRules) {\n\n\t\tthis.name = name;\n\t\tthis.rules = [].concat(startingRule, additionalRules);\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this grammar.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rules of this grammar.\n\t */\n\taccept(input, parser) {\n\n\t\treturn this.startingRule.accept(input, parser);\n\t}\n\n\t/**\n\t * Return the rule that has the given name.\n\t * \n\t * @param {String} name\n\t * @return {Rule}\n\t */\n\tfindRuleByName(name) {\n\n\t\tlet rule = this.rules.find(rule => rule.name === name);\n\t\tif (!rule) {\n\t\t\tthrow new Error(`Failed to find a rule named \"${name}\" in the grammar`);\n\t\t}\n\t\treturn rule;\n\t}\n\n\t/**\n\t * Returns the grammar's starting rule.\n\t * \n\t * @return {Rule}\n\t */\n\tget startingRule() {\n\n\t\treturn this.rules[0];\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an expression function where the underlying expression doesn't need\n * to be matched.  Thus, optional expressions \"always\" match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const Optional = expression => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = parser.parseWithExpression(input, expression);\n\t\treturn result !== null ? result : '';\n\t});\n};\n\n/**\n * Returns an expression function where the expression must be matched against\n * at least once to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const OneOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results.length > 0 ? results : null;\n\t});\n};\n\n/**\n * Returns an expression function where only one of the underlying expressions\n * must be matched in order to consider the expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const OrderedChoice = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result !== null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t});\n};\n\n/**\n * Returns an expression whose underlying expressions must be matched in order\n * to consider the entire expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const Sequence = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresults.push(result);\n\t\t}\n\t\treturn results;\n\t});\n};\n\n/**\n * Returns an expression function where the expression can be matched a repeated\n * number of times or none at all to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const ZeroOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t});\n};\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wrapper around the string being parsed, with a position that keeps track of\n * what part of the imput is currently being read/tested.\n * \n * @author Emanuel Rabina\n */\nexport default class InputBuffer {\n\n\t/**\n\t * @private\n\t * @type {Number}\n\t */\n\tposition = 0;\n\n\t/**\n\t * @private\n\t * @type {Array<Number>}\n\t */\n\tpositionStack = [];\n\n\t/**\n\t * @param {String} input\n\t */\n\tconstructor(input) {\n\n\t\tthis.input = input;\n\t}\n\n\t/**\n\t * Clear the previously {@link #mark}ed position.\n\t */\n\tclear() {\n\n\t\tlet lastPosition = this.positionStack.pop();\n\t\tif (lastPosition === undefined) {\n\t\t\tthrow new Error('Called clear() but no matching mark()');\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether or not the current position is at the end of the input,\n\t * meaning we've exhausted the entire input string.\n\t * \n\t * @return {Boolean}\n\t */\n\texhausted() {\n\n\t\treturn this.position === this.input.length;\n\t}\n\n\t/**\n\t * Sets a mark at the current position so that it can be returned to by a\n\t * matching {@link #reset} call.\n\t */\n\tmark() {\n\n\t\tthis.positionStack.push(this.position);\n\t}\n\n\t/**\n\t * Convenience method for surrounding a function with a call to {@link #mark},\n\t * then {@link #clear} if the result of the function is non-null, or\n\t * {@link #reset} if `null`.\n\t * \n\t * @template T\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\tmarkAndClearOrReset(func) {\n\n\t\tthis.mark();\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\tthis.clear();\n\t\t\treturn result;\n\t\t}\n\t\tthis.reset();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Reads as many characters from the current position as satisfies the given\n\t * pattern, returning the read characters and advancing the mark by as many\n\t * characters.\n\t * \n\t * @param {RegExp} pattern\n\t * @return {Array} The array of matched strings, or `null` if the pattern\n\t *   didn't match.\n\t */\n\tread(pattern) {\n\n\t\tlet remaining = this.input.substring(this.position);\n\t\tlet leadingWhitespace = remaining.match(/^\\s+/);\n\t\tif (leadingWhitespace) {\n\t\t\tleadingWhitespace = leadingWhitespace[0];\n\t\t\tremaining = remaining.substring(leadingWhitespace.length);\n\t\t}\n\t\tlet result = new RegExp(pattern.source).exec(remaining);\n\t\tif (result) {\n\t\t\tlet [value] = result;\n\t\t\tif (remaining.startsWith(value)) {\n\t\t\t\tthis.position += (value.length + (leadingWhitespace ? leadingWhitespace.length : 0));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Revert to the last @{link #mark}ed position.\n\t */\n\treset() {\n\n\t\tlet newPosition = this.positionStack.pop();\n\t\tif (newPosition === undefined) {\n\t\t\tthrow new Error('Called reset() but no matching mark()');\n\t\t}\n\t\tthis.position = newPosition;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * A special kind of expression that understands matched portions of regular\n * expressions to run processing over, which may lead to additional parsing\n * expressions.\n * \n * This expression should be used sparingly as the regexes within need to take\n * care of whitespace between tokens themselves, which can be annoying.\n * \n * @param {RegExp} expression\n * @param {Array<Matchable>} matchers\n * @return {Matchable}\n */\nexport const RegularExpression = (expression, matchers) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = input.read(expression);\n\t\tif (result) {\n\t\t\tlet parseResults = [result[0]];\n\t\t\tfor (let i = 1; i < result.length; i++) {\n\t\t\t\tlet match = result[i];\n\t\t\t\tif (match !== undefined) {\n\t\t\t\t\tlet parseResult = parser.parseWithExpression(new InputBuffer(match), matchers[i - 1]);\n\t\t\t\t\tif (parseResult === null) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tparseResults.push(parseResult);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parseResults;\n\t\t}\n\t\treturn null;\n\t});\n};\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}          from './AllInput.js';\nimport ExpressionProcessor from './ExpressionProcessor.js';\nimport ThymeleafRule       from './ThymeleafRule.js';\nimport Grammar             from '../../parser/Grammar.js';\nimport {\n\tOptional,\n\tOneOrMore,\n\tOrderedChoice,\n\tSequence,\n\tZeroOrMore\n}                          from '../../parser/Operators.js';\nimport {RegularExpression} from '../../parser/RegularExpression.js';\n\nimport {flatten, remove} from '@ultraq/array-utils';\n\n// For helping identify rules that return objects\nconst METADATA_FRAGMENT  = 'fragment';\nconst METADATA_ITERATION = 'iteration';\nconst METADATA_MESSAGE   = 'message';\n\n/**\n * Grammar for the Thymeleaf expression language.  Describes the language and\n * how to parse it.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf Expression Language',\n\n\t// Ordered as at https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax\n\tnew ThymeleafRule('ThymeleafExpression',\n\t\tOrderedChoice(\n\t\t\tAllInput('VariableExpression'),\n\t\t\tAllInput('MessageExpression'),\n\t\t\tAllInput('LinkExpression'),\n\t\t\tAllInput('FragmentExpression'),\n\t\t\tAllInput('Iteration'),\n\t\t\tAllInput('StringConcatenation'),\n\t\t\tAllInput('ScopedVariables'),\n\t\t\tAllInput('Literal'),\n\t\t\tAllInput('LogicalExpression'),\n\t\t\tAllInput('IfThenCondition'),\n\t\t\tAllInput('IfThenElseCondition'),\n\t\t\tAllInput('TokenLiteral'),\n\t\t\tAllInput('Nothing')\n\t\t)\n\t),\n\n\n\t// Simple expressions\n\t// ==================\n\n\t/**\n\t * Variable expressions, `${variable}`.  Represents a value to be retrieved\n\t * from the current context.  Also is an entry into the underlying expression\n\t * language, so this part often extends to do what OGNL (and thus SpEL) can\n\t * do.\n\t */\n\tnew ThymeleafRule('VariableExpression',\n\t\tSequence(/\\${/, 'Chain', /\\}/),\n\t\t([, chain]) => context => {\n\t\t\tlet result = chain(context);\n\t\t\treturn result !== null && result !== undefined ? result : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('Chain',\n\t\tSequence(Optional('Negation'), 'ChainLink', ZeroOrMore(Sequence(/\\./, 'ChainLink'))),\n\t\t([negation, ...chain]) => context => {\n\t\t\tlet result = flatten(chain).filter(link => link !== '.').reduce((linkContext, nextLink) => {\n\t\t\t\tif (linkContext === null || linkContext === undefined) {\n\t\t\t\t\treturn linkContext;\n\t\t\t\t}\n\t\t\t\treturn nextLink(linkContext, context);\n\t\t\t}, context);\n\t\t\treturn typeof negation === 'function' ? !result : result;\n\t\t}\n\t),\n\tnew ThymeleafRule('ChainLink',\n\t\tOrderedChoice('MethodCall', 'PropertyName', 'Literal')\n\t),\n\tnew ThymeleafRule('Negation', /!/),\n\n\t/**\n\t * Message expressions, `#{messageKey(parameters)}`.  Used for referencing\n\t * text from a resource file, often for localization purposes.\n\t */\n\tnew ThymeleafRule('MessageExpression',\n\t\tSequence(/#{/, 'MessageKey', Optional(Sequence(/\\(/, Sequence('Expression', ZeroOrMore(Sequence(/,/, 'Expression'))), /\\)/)), /}/),\n\t\t([, messageKey, [, messageParameters]]) => context => {\n\t\t\treturn {\n\t\t\t\ttype: METADATA_MESSAGE,\n\t\t\t\tkey: messageKey(context),\n\t\t\t\tparameters: messageParameters ?\n\t\t\t\t\tflatten(messageParameters)\n\t\t\t\t\t\t.filter(messageParameter => typeof messageParameter === 'function')\n\t\t\t\t\t\t.map(messageParameter => messageParameter(context)) :\n\t\t\t\t\tnull\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('MessageKey', /[\\w.-]+/),\n\n\t/**\n\t * Link expressions, `@{url(parameters)}`.  Used for generating URLs out of\n\t * context parameters.\n\t * \n\t * TODO: Change this to use the other expression types as it causes a circular\n\t *       dependency in the build.\n\t */\n\tnew ThymeleafRule('LinkExpression',\n\t\tRegularExpression(/^@\\{(.+?)(\\(.+\\))?\\}$/, ['Url', 'UrlParameters']),\n\t\t([, urlFunc, parameters]) => context => {\n\n\t\t\tlet url = urlFunc(context);\n\t\t\tif (parameters) {\n\n\t\t\t\t// TODO: Push this parsing of the parameters list back into the grammar\n\t\t\t\tlet expressionProcessor = new ExpressionProcessor();\n\t\t\t\tlet paramsList = parameters(context).slice(1, -1).split(',').map(param => {\n\t\t\t\t\tlet [lhs, rhs] = param.split('=');\n\t\t\t\t\treturn [lhs, expressionProcessor.process(rhs, context)];\n\t\t\t\t});\n\n\t\t\t\t// Fill out any placeholders in the URL from the parameters\n\t\t\t\twhile (true) { // eslint-disable-line\n\t\t\t\t\tlet urlTemplate = /(.*?)\\{(.+?)\\}(.*)/.exec(url);\n\t\t\t\t\tif (urlTemplate) {\n\t\t\t\t\t\tlet [, head, placeholder, tail] = urlTemplate;\n\t\t\t\t\t\tlet paramEntry = remove(paramsList, ([lhs]) => lhs === placeholder);\n\t\t\t\t\t\tif (paramEntry) {\n\t\t\t\t\t\t\turl = `${head}${paramEntry[1]}${tail}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remaining parameters become search query parameters\n\t\t\t\tif (paramsList.length) {\n\t\t\t\t\turl += `?${paramsList.map(([key, value]) => `${key}=${value}`).join('&')}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t),\n\tnew ThymeleafRule('Url', /.+/),\n\tnew ThymeleafRule('UrlParameters', /\\((.+)\\)/),\n\n\t/**\n\t * Fragment expressions, `~{template :: fragment(parameters)}`.  A locator for\n\t * a piece of HTML in the same or another template.\n\t */\n\tnew ThymeleafRule('FragmentExpression',\n\t\tSequence(/~{/, 'TemplateName', /::/, 'FragmentName', Optional('FragmentParametersSection'), /}/),\n\t\t([, templateName, , fragmentName, parameters]) => context => {\n\n\t\t\t// TODO: Should executing a fragment expression locate and return the\n\t\t\t//       fragment?  If so, then it'll make expression execution\n\t\t\t//       asynchronous!\n\t\t\treturn {\n\t\t\t\ttype: METADATA_FRAGMENT,\n\t\t\t\ttemplateName: templateName(context),\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameters: parameters ? parameters(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('TemplateName',\n \t\tOrderedChoice(\n\t\t\t/[\\w-._/]+/,\n\t\t\t'VariableExpression'\n\t\t)\n \t),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParametersSection',\n\t\tSequence(/\\(/, Optional('FragmentParameters'), /\\)/),\n\t\t([, parameters]) => context => {\n\t\t\treturn parameters(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence('Expression', ZeroOrMore(Sequence(/,/, 'Expression'))),\n\t\t(expressionsAndSeparators) => context => {\n\t\t\treturn expressionsAndSeparators ?\n\t\t\t\tflatten(expressionsAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(expressions => expressions(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Complex expressions\n\t// ===================\n\n\t/**\n\t * Iteration, `localVar : ${collection}`.  The name of the variable for each\n\t * loop, followed by the collection being iterated over.\n\t */\n\tnew ThymeleafRule('Iteration',\n\t\tSequence('Identifier', Optional(Sequence(/,/, 'Identifier')), /:/, 'VariableExpression'),\n\t\t([localValueName, [, iterationStatusVariable], , collectionExpressionAction]) => context => ({\n\t\t\ttype: METADATA_ITERATION,\n\t\t\tlocalValueName: localValueName(context),\n\t\t\titerable: collectionExpressionAction(context),\n\t\t\titerationStatusVariable: iterationStatusVariable ? iterationStatusVariable(context) : null\n\t\t})\n\t),\n\n\t/**\n\t * String concatenation, `'...' + '...'` or even `${...} + ${...}`, the\n\t * joining of 2 expressions by way of the `+` operator.\n\t */\n\tnew ThymeleafRule('StringConcatenation',\n\t\tSequence('Concatenatable', OneOrMore(Sequence(/\\+/, 'Concatenatable'))),\n\t\t(values) => context => {\n\t\t\treturn flatten(values).filter(item => item !== '+').reduce((result, value) => {\n\t\t\t\treturn result + (typeof value === 'function' ? value(context) : value);\n\t\t\t}, '');\n\t\t}\n\t),\n\tnew ThymeleafRule('Concatenatable',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'VariableExpression'\n\t\t)\n\t),\n\n\t/**\n\t * Scoped variable aliases, `key=${expression},...`, describes one or more\n\t * names for scoped variables with the expressions that can be their values.\n\t */\n\tnew ThymeleafRule('ScopedVariables',\n\t\tSequence('ScopedVariable', ZeroOrMore(Sequence(/,/, 'ScopedVariable'))),\n\t\t(aliases) => context => {\n\t\t\treturn flatten(aliases).map(alias => alias(context));\n\t\t}\n\t),\n\tnew ThymeleafRule('ScopedVariable',\n\t\tSequence('Identifier', /=/, 'Expression'),\n\t\t([name, , expression]) => context => ({\n\t\t\tname: name(context),\n\t\t\tvalue: expression(context)\n\t\t})\n\t),\n\n\t// Literals\n\t// ========\n\n\tnew ThymeleafRule('Literal',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'NumberLiteral',\n\t\t\t'BooleanLiteral',\n\t\t\t'NullLiteral'\n\t\t)\n\t),\n\n\t/**\n\t * String literal, characters surrounded by `'` (single quotes).\n\t * \n\t * This is trying to emulate negative lookbehind so that escaped quotes don't\n\t * get counted as string terminators, but JavaScript only got that feature in\n\t * ES2018, so if I used it it'd leave too many JS engines without support.\n\t */\n\tnew ThymeleafRule('StringLiteral', /'.*?(?!\\\\').'/, result => () => result.slice(1, -1).replace(/\\\\/g, '')),\n\n\t/**\n\t * A number.\n\t */\n\tnew ThymeleafRule('NumberLiteral', /\\d+(\\.\\d+)?/, result => () => parseFloat(result)),\n\n\t/**\n\t * One of `true` or `false`.\n\t */\n\tnew ThymeleafRule('BooleanLiteral', /(true|false)/, result => () => result === 'true'),\n\n\t/**\n\t * The word `null` to represent the null value.\n\t */\n\t// TODO: The parser uses null to mean 'failed parse', so this might not work?\n\tnew ThymeleafRule('NullLiteral', /null/, () => () => null),\n\n\t/**\n\t * A token literal, which is pretty much anything else that can't be categorized\n\t * by the other literal types.  This is often used as a fallback in the\n\t * expression language so that, for any unknown input, we're still returning\n\t * something.\n\t */\n\tnew ThymeleafRule('TokenLiteral', /[^: ${}]+/, result => () => result),\n\n\n\t// Text operations\n\t// ===============\n\n\n\t// Arithmetic operations\n\t// =====================\n\n\n\t// Boolean operations\n\t// ==================\n\n\n\t// Comparisons and equality\n\t// ========================\n\n\t/**\n\t * A logical expression is any expression that resolves to a `true`/`false`\n\t * value.\n\t */\n\tnew ThymeleafRule('LogicalExpression',\n\t\tSequence('Expression', 'Comparator', 'Expression'),\n\t\t([leftOperand, comparator, rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\tswitch (comparator(context)) {\n\t\t\t\tcase '==':  return lhs == rhs; // eslint-disable-line\n\t\t\t\tcase '===': return lhs === rhs;\n\t\t\t\tcase '!=':  return lhs != rhs; // eslint-disable-line\n\t\t\t\tcase '!==': return lhs !== rhs;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t),\n\tnew ThymeleafRule('Comparator',\n\t\tOrderedChoice(\n\t\t\t/[=!]==?/\n\t\t)\n\t),\n\n\n\t// Conditional operators\n\t// =====================\n\n\t/**\n\t * If-then condition, `if ? then`.  This is the truthy branch only of the\n\t * classic ternary operator.  The falsey branch is a no-op.\n\t */\n\tnew ThymeleafRule('IfThenCondition',\n\t\tSequence('Condition', /\\?/, 'Expression'),\n\t\t([condition, , truthyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : undefined;\n\t\t}\n\t),\n\n\t/**\n\t * If-then-else condition, `if ? then : else`, the classic ternary operator.\n\t */\n\tnew ThymeleafRule('IfThenElseCondition',\n\t\tSequence('Condition', /\\?/, 'Expression', /:/, 'Expression'),\n\t\t([condition, , truthyExpression, , falseyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : falseyExpression(context);\n\t\t}\n\t),\n\n\t/**\n\t * A condition is some expression or value that resolves to a true/false\n\t * value.\n\t */\n\tnew ThymeleafRule('Condition',\n\t\tOrderedChoice(\n\t\t\t'LogicalExpression',\n\t\t\t'Expression'\n\t\t)\n\t),\n\n\n\t// Special tokens\n\t// ==============\n\n\t/**\n\t * An expression that matches the empty string.\n\t */\n\tnew ThymeleafRule('Nothing', /^$/),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/),\n\tnew ThymeleafRule('PropertyName', 'Identifier',\n\t\t(propertyName) => context => {\n\t\t\tlet property = propertyName(context);\n\t\t\treturn context.hasOwnProperty(property) ? context[property] : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodCall',\n\t\tSequence('MethodName', /\\(/, Optional('MethodParameters'), /\\)/),\n\t\t([name, , parameters]) => (context, parameterContext) => {\n\t\t\tlet methodName = name(context);\n\t\t\tlet method = context[methodName];\n\t\t\tif (!method) {\n\t\t\t\tconsole.warn(`No method '${methodName}' present on the current context.  Expression: ${context.expression}`);\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn method.apply(context, parameters(parameterContext || context));\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodName', 'Identifier'),\n\tnew ThymeleafRule('MethodParameters',\n\t\tSequence('Chain', ZeroOrMore(Sequence(/,/, 'Chain'))),\n\t\t(parametersAndSeparators) => context => {\n\t\t\treturn parametersAndSeparators ?\n\t\t\t\tflatten(parametersAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(parameter => parameter(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\t/**\n\t * Any valid unit of code that resolves to some value.\n\t */\n\tnew ThymeleafRule('Expression',\n\t\tOrderedChoice(\n\t\t\t'VariableExpression',\n\t\t\t'StringConcatenation',\n\t\t\t'Literal'\n\t\t)\n\t)\n);\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * Any one of the objects that can be matched:\n *  - an expression function\n *  - a string that references another rule\n *  - a regular expression\n * \n * @typedef {String|RegExp|Function} Matchable\n */\n\n/**\n * A recursive descent parser for any parsing expression grammar defined by the\n * constructs in this module.\n * \n * TODO: Own module?\n * \n * @author Emanuel Rabina\n */\nexport default class Parser {\n\n\texpressionStack = [];\n\n\t/**\n\t * @param {Grammar} grammar\n\t */\n\tconstructor(grammar) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse a string, attempting to build the parse tree defined by the rules in\n\t * the configured grammar.  Parsing is considered successful when there are no\n\t * more non-terminating symbols in the grammar and all of the input has been\n\t * read.\n\t * \n\t * @param {String} input\n\t * @return {Object} The parse tree if the input could be parsed, `null`\n\t *   otherwise.\n\t */\n\tparse(input) {\n\n\t\tlet inputBuffer = new InputBuffer(input);\n\t\tlet matchResult = this.grammar.accept(inputBuffer, this);\n\t\tif (matchResult === null || !inputBuffer.exhausted()) {\n\t\t\tlet errorMessage = `Failed to parse \"${input}\"`;\n\n\t\t\t// Don't bring down the thread if we can't parse\n\t\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\t\tconsole.error(errorMessage);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t}\n\t\t}\n\t\treturn matchResult;\n\t}\n\n\t/**\n\t * Parse the input against the given expression.  An expression can either be\n\t * a reference to another rule in the current grammar, or a regular expression\n\t * that consumes input.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @return {Object}\n\t */\n\tparseWithExpression(input, expression) {\n\n\t\t// Name of another rule in the grammar\n\t\tif (typeof expression === 'string') {\n\t\t\tlet rule = this.grammar.findRuleByName(expression);\n\t\t\treturn rule ? rule.accept(input, this) : null;\n\t\t}\n\n\t\t// A regular expression that must be matched\n\t\telse if (expression instanceof RegExp) {\n\t\t\tlet result = input.read(expression);\n\t\t\tif (result) {\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t}\n\n\t\t// An expression function to be executed\n\t\telse if (typeof expression === 'function') {\n\t\t\treturn expression(input, this);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Surrounds a function that evaluates an expression with tracking it against\n\t * the current stack.  Useful for knowing how the current expression was\n\t * arrived at through the grammar's rules.\n\t * \n\t * @template T\n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @param {String} name\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\ttrackExpression(input, expression, name, func) {\n\n\t\tlet stackSize = this.expressionStack.push({\n\t\t\tname,\n\t\t\texpression: typeof expression !== 'function' ? expression.toString() : null,\n\t\t\tinput: input.input.substring(input.position)\n\t\t});\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\treturn result;\n\t\t}\n\t\tthis.expressionStack.splice(stackSize - 1);\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ThymeleafExpressionLanguage from './ThymeleafExpressionLanguage.js';\nimport Parser                      from '../../parser/Parser.js';\n\n/**\n * Parses and executes Thymeleaf expressions.\n * \n * TODO: Create a shared instance of this for a processing context so that it\n *       doesn't need to be recreated over and over.\n * \n * @author Emanuel Rabina\n */\nexport default class ExpressionProcessor {\n\n\t/**\n\t * Constructor, create a new processor that can parse/execute a string in the\n\t * given grammar.\n\t * \n\t * @param {Grammar} [grammar=ThymeleafExpressionLanguage]\n\t */\n\tconstructor(grammar = ThymeleafExpressionLanguage) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse and execute the given input as a Thymeleaf expression.\n\t * \n\t * @param {String} input\n\t * @param {Object} [context={}]\n\t * @return {*}\n\t */\n\tprocess(input, context = {}) {\n\n\t\t// TODO: Probably don't need to create a new parser every time?\n\t\tlet parser = new Parser(this.grammar);\n\t\tlet expression = parser.parse(input);\n\t\treturn expression ? expression({\n\t\t\t...context,\n\t\t\texpression: input\n\t\t}) : null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for attribute processors.\n * \n * @author Emanuel Rabina\n */\nexport default class AttributeProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {escapeHtml} from '@ultraq/string-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:attr` attribute processor, modifies or sets\n * a target attribute to whatever its associated expression evaluates to.\n * \n * @author Emanuel Rabina\n */\nexport default class AttrAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'attr';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, AttrAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:attr` or `data-th-attr` attribute\n\t * on it, picking out the target attributes and setting them to whatever their\n\t * expressions evaluate to.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\t// TODO: This regex, is this some kind of value list that needs to be\n\t\t//       turned into an expression?\n\t\tif (/(.+=.+,)*.+=.+/.test(attributeValue)) {\n\t\t\tattributeValue.split(',').forEach(attribute => {\n\t\t\t\tlet attributeParts = attribute.split('=');\n\t\t\t\telement.setAttribute(attributeParts[0], escapeHtml(new ExpressionProcessor().process(attributeParts[1], context)));\n\t\t\t});\n\t\t}\n\t\t/* istanbul ignore next */\n\t\telse if (process.env.NODE_ENV !== 'test') {\n\t\t\tconsole.warn(`Value to ${attribute}, ${attributeValue}, doesn't seem to contain an attribute assignment expression.  Ignoring.`);\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parent class for element processors.\n * \n * @author Emanuel Rabina\n */\nexport default class ElementProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ElementProcessor from '../../processors/ElementProcessor.js';\n\n/**\n * Equivalent of Thymeleaf's \"synthetic tag\", `th:block`, which removes itself,\n * leaving the body of the tag behind.\n * \n * @author Emanuel Rabina\n */\nexport default class BlockElementProcessor extends ElementProcessor {\n\n\tstatic NAME = 'block';\n\n\t/**\n\t * Constructor, set this processor to use the `block` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, BlockElementProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element named `th:block`, removing itself to leave its\n\t * body/contents behind.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {Object} context\n\t * @return {Boolean} `true` to indicate that the elements need reprocessing.\n\t */\n\tprocess(element, context) {\n\n\t\tlet parent = element.parentElement;\n\t\twhile (element.firstChild) {\n\t\t\tlet child = element.firstChild;\n\t\t\tparent.insertBefore(child, element);\n\n\t\t\tif (child instanceof Element && element.__thymeleafLocalVariables) {\n\t\t\t\tchild.__thymeleafLocalVariables = {\n\t\t\t\t\t...(child.__thymeleafLocalVariables || {}),\n\t\t\t\t\t...element.__thymeleafLocalVariables\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tparent.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Thymeleaf's `th:checked` attribute processor, sets or removes the `checked`\n * attribute from an element based on the result of the expression within it.\n * \n * TODO: This is one of HTML5s \"boolean attributes\", attributes whose values are\n *       true simply by being present in the element, regardless of the value\n *       inside it.  To act as false, the attribute has to be removed.  Find a\n *       way to generate these from some list of boolean attributes so that I\n *       don't need to write a class for each one!\n * \n * @author Emanuel Rabina\n */\nexport default class CheckedAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'checked';\n\n\t/**\n\t * Constructor, set this processor to use the `checked` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, CheckedAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:checked` or `data-th-checked`\n\t * attribute on it, either setting or removing a `checked` attribute to the\n\t * current element based on the result of the inner expression.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet result = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (result) {\n\t\t\telement.setAttribute('checked', '');\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute('checked');\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * The `th:classappend` is a special attribute that applies the expression to\n * any existing classes already on an element.\n * \n * @author Emanuel Rabina\n */\nexport default class ClassAppendAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'classappend';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, ClassAppendAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:classappend` or `data-th-classappend`\n\t * attribute on it, adding the resulting classes to any existing classes on\n\t * the current element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet classes = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (classes) {\n\t\t\telement.className += ` ${classes}`;\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:each` attribute processor, iterates over an\n * [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols),\n * executing a piece of template for every iteration.\n * \n * @author Emanuel Rabina\n */\nexport default class EachAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'each';\n\n\t/**\n\t * Constructor, set this processor to use the `each` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, EachAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:each`/`data-th-each` attribute,\n\t * repeating the markup for every object in the iterable value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tlet iterationInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (iterationInfo) {\n\t\t\tlet {localValueName, iterable} = iterationInfo;\n\t\t\tlet templateNode = element.cloneNode(true);\n\n\t\t\tfor (let value of iterable) {\n\t\t\t\tlet localClone = templateNode.cloneNode(true);\n\t\t\t\tlocalClone.__thymeleafLocalVariables = {\n\t\t\t\t\t[localValueName]: value\n\t\t\t\t};\n\t\t\t\telement.parentElement.appendChild(localClone);\n\t\t\t}\n\t\t}\n\t\telement.parentElement.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or empties an attribute value on\n * an element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class EmptyableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.setAttribute(this.name, value ? value.toString() : '');\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const EMPTYABLE_ATTRIBUTE_NAMES = [\n\t'datetime',\n\t'href',\n\t'src',\n\t'style',\n\t'value'\n];\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:fragment` attribute processor, marks an\n * element as a template fragment that can be imported by other processors like\n * `th:insert`.\n * \n * @author Emanuel Rabina\n */\nexport default class FragmentAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'fragment';\n\n\t/**\n\t * Constructor, set this processor to use the `fragment` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, FragmentAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:fragment` or `data-th-fragment`\n\t * attribute on it.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Add an event listener to `element` that only fires when the target of the\n * event matches `selector`.\n * \n * @param {Element} element\n * @param {String} eventName\n * @param {String} selector\n * @param {Function} handler\n */\nexport function addEventDelegate(element, eventName, selector, handler) {\n  element.addEventListener(eventName, function (event) {\n    if (event.target.matches(selector)) {\n      handler(event);\n    }\n  });\n}\n/**\n * Removes all of an element's child nodes.\n * \n * @param {Element} element\n */\n\nexport function clearChildren(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n/**\n * Deserialize an HTML string into a document fragment.\n * \n * @param {String} htmlString\n * @return {DocumentFragment}\n */\n\nexport function deserialize(htmlString) {\n  return document.createRange().createContextualFragment(htmlString);\n}\n/**\n * Serialize a document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {String}\n */\n\nexport function serialize(documentFragment) {\n  return new XMLSerializer().serializeToString(documentFragment);\n}\n\n//# sourceMappingURL=dom-utils.es.js.map","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:if` attribute processor, includes or\n * excludes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n * \n * @author Emanuel Rabina\n */\nexport default class IfAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'if';\n\n\t/**\n\t * Constructor, set this processor to use the `if` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, IfAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:if` or `data-th-if` attribute\n\t * on it, evaluating the expression for truthy/falsey, rendering/excluding the\n\t * element and its children based on the result.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} `true` if the element was removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet expressionResult = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (!expressionResult) {\n\t\t\tclearChildren(element);\n\t\t\telement.parentNode.removeChild(element);\n\t\t\treturn true;\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}                       from './AllInput.js';\nimport ThymeleafRule                    from './ThymeleafRule.js';\nimport {Optional, Sequence, ZeroOrMore} from '../../parser/Operators.js';\nimport Grammar                          from '../../parser/Grammar.js';\n\nimport {flatten} from '@ultraq/array-utils';\n\n/**\n * Grammar for Thymeleaf fragment signatures.  This is separate from the\n * expression language as these are not expressions, but rather marker syntaxes.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf fragment signature',\n\n\tnew ThymeleafRule('ThymeleafFragmentSignatureRule',\n\t\tAllInput('FragmentSignature')\n\t),\n\n\t/**\n\t * The target end of a fragment expression, contains the fragment name and\n\t * optional parameter names.\n\t */\n\tnew ThymeleafRule('FragmentSignature',\n\t\tSequence('FragmentName', Optional('FragmentParameters')),\n\t\t([fragmentName, parameterNames]) => context => {\n\t\t\treturn {\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameterNames: parameterNames ? parameterNames(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence(/\\(/, ZeroOrMore('FragmentParameterNames'), /\\)/),\n\t\t([, [parameterNames]]) => context => {\n\t\t\treturn parameterNames(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameterNames',\n\t\tSequence('Identifier', ZeroOrMore(Sequence(/,/, 'Identifier'))),\n\t\t(namesAndSeparators) => context => {\n\t\t\treturn namesAndSeparators ?\n\t\t\t\tflatten(namesAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(name => name(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/)\n);\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global ENVIRONMENT */\n\n/**\n * Sets a Thymeleaf attribute and value on an existing element.  Used primarily\n * in tests.\n * \n * @param {Element} element\n * @param {String} attribute\n * @param {String} value\n * @return {Element} The same element but with the attribute and value set on it.\n */\nexport function createThymeleafAttributeValue(element, attribute, value) {\n\telement.setAttribute(attribute, value);\n\treturn element;\n}\n\n/**\n * Returns the value of a Thymeleaf attribute processor.\n * \n * @param {Element} element\n * @param {String} prefix\n * @param {String} processorName\n * @return {String} The value of the Thymeleaf attribute processor, or `null`\n *   if the attribute processor wasn't present.\n */\nexport function getThymeleafAttributeValue(element, prefix, processorName) {\n\treturn element.getAttribute(`${prefix}:${processorName}`) ||\n\t       element.getAttribute(`data-${prefix}-${processorName}`);\n}\n\n/**\n * Use either JSDOM or the browser's native DOM parsing to deserialize the HTML\n * string into a document fragment.\n * \n * @param {String} htmlString\n * @return {DocumentFragment}\n */\nexport function deserialize(htmlString) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\trequire('@ultraq/dom-utils').deserialize(htmlString) :\n\t\trequire('jsdom').jsdom(htmlString, {\n\t\t\tfeatures: {\n\t\t\t\tFetchExternalResources: false,\n\t\t\t\tProcessExternalResources: false\n\t\t\t}\n\t\t});\n}\n\n/**\n * Use either JSDOM or the browser's native DOM serialization to serialize a\n * document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {String}\n */\nexport function serialize(documentFragment) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\trequire('@ultraq/dom-utils').serialize(documentFragment) :\n\t\trequire('jsdom').serializeDocument(documentFragment);\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {deserialize}              from './Dom.js';\nimport FragmentAttributeProcessor from '../standard/processors/FragmentAttributeProcessor.js';\nimport StandardDialect            from '../standard/StandardDialect.js';\n\nimport {$} from 'dumb-query-selector';\n\n/**\n * Extract HTML from the target identified by the given fragment information.\n * \n * @param {Object} fragmentInfo\n * @param {Object} context\n * @return {Promise<Element>}\n */\nexport async function extractFragment(fragmentInfo, context) {\n\n\tlet {templateResolver} = context;\n\tif (templateResolver) {\n\t\tlet {templateName, fragmentName} = fragmentInfo;\n\t\tlet template = deserialize(await templateResolver(templateName));\n\n\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\tlet dialectPrefix = standardDialect.prefix;\n\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\treturn $(`[${dialectPrefix}\\\\:${fragmentProcessorName}^=\"${fragmentName}\"]`, template) ||\n\t\t\t\t\t $(`[data-${dialectPrefix}-${fragmentProcessorName}^=\"${fragmentName}\"]`, template);\n\t}\n\n\tconsole.log('No template resolver configured');\n\treturn null;\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FragmentAttributeProcessor   from './FragmentAttributeProcessor.js';\nimport StandardDialect              from '../StandardDialect.js';\nimport ExpressionProcessor          from '../expressions/ExpressionProcessor.js';\nimport FragmentSignatureGrammar     from '../expressions/FragmentSignatureGrammar.js';\nimport AttributeProcessor           from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue} from '../../utilities/Dom.js';\nimport {extractFragment}            from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:insert` attribute processor, inserts the\n * referenced template fragment as a child of the current element.\n * \n * @author Emanuel Rabina\n */\nexport default class InsertAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'insert';\n\n\t/**\n\t * Constructor, set this processor to use the `insert` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, InsertAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:insert`/`data-th-insert` attribute,\n\t * replacing the current element's children with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Promise<Boolean>} Whether or not the parent element needs to do a\n\t *   second pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(fragmentInfo, context);\n\t\t\tif (fragment) {\n\t\t\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\t\t\tlet dialectPrefix = standardDialect.prefix;\n\t\t\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, dialectPrefix, fragmentProcessorName);\n\t\t\t\tlet {parameterNames} = new ExpressionProcessor(FragmentSignatureGrammar).process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\n\t\t\t\telement.appendChild(fragment);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or removes an attribute on an\n * element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class RemovableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (value) {\n\t\t\telement.setAttribute(this.name, value.toString());\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute(this.name);\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const REMOVABLE_ATTRIBUTE_NAMES = [\n\t'alt',\n\t'class'\n];\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * `th:remove`, used to remove the current element or select parts of it (and\n * its children).\n * \n * @author Emanuel Rabina\n */\nexport default class RemoveAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'remove';\n\n\t/**\n\t * Constructor, set this processor to use the `remove` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, RemoveAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:remove`/`data-th-remove`\n\t * attribute, removing the current element or parts of it based on the\n\t * attribute value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} Whether reprocessing behaviour needs to be applied, only\n\t *   when the current tag has been removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tswitch (attributeValue) {\n\t\t\tcase 'all':\n\t\t\t\telement.parentElement.removeChild(element);\n\t\t\t\treturn true;\n\t\t\tcase 'all-but-first':\n\t\t\t\twhile (element.lastElementChild !== element.firstElementChild) {\n\t\t\t\t\telement.removeChild(element.lastElementChild);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n","/*\n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FragmentAttributeProcessor   from './FragmentAttributeProcessor.js';\nimport StandardDialect              from '../StandardDialect.js';\nimport ExpressionProcessor          from '../expressions/ExpressionProcessor.js';\nimport FragmentSignatureGrammar     from '../expressions/FragmentSignatureGrammar.js';\nimport AttributeProcessor           from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue} from '../../utilities/Dom.js';\nimport {extractFragment}            from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:relace` attribute processor, replaces the\n * current element with the fragment referenced by the processor.\n * \n * @author Emanuel Rabina\n */\nexport default class ReplaceAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'replace';\n\n\t/**\n\t * Constructor, set this processor to use the `replace` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, ReplaceAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:replace`/`data-th-replace`\n\t * attribute, replacing the current element with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Promise<Boolean>} Whether or not the parent element needs to do a\n\t *   second pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(fragmentInfo, context);\n\t\t\tif (fragment) {\n\n\t\t\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\t\t\tlet dialectPrefix = standardDialect.prefix;\n\t\t\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, dialectPrefix, fragmentProcessorName);\n\t\t\t\tlet {parameterNames} = new ExpressionProcessor(FragmentSignatureGrammar).process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\n\t\t\t\t// TODO: Can simplify this with insertAdjacent*(), but need to upgrade\n\t\t\t\t//       JSDOM first.\n\t\t\t\telement.parentElement.insertBefore(fragment, element);\n\t\t\t\telement.remove();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\telement.remove();\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Build a message string from a processed message expression.\n * \n * @param {Object} messageInfo\n * @param {Object} context\n * @return {Promise<String>}\n */\nexport async function buildMessage(messageInfo, context) {\n\n\tlet {messageResolver} = context;\n\tif (messageResolver) {\n\t\tlet {key, parameters} = messageInfo;\n\t\treturn await messageResolver(key, parameters) || '';\n\t}\n\n\tconsole.log('No message resolver configured');\n\treturn null;\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\nimport {buildMessage}      from '../../utilities/Messages.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:text` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed, escaping any unsafe input.\n * \n * @author Emanuel Rabina\n */\nexport default class TextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'text';\n\n\t/**\n\t * Constructor, set this processor to use the `text` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, TextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:text` or `data-th-text` attribute\n\t * on it, taking the text expression in the value and applying it to the text\n\t * content of the element.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\t// TODO: Move message constructon to the expression language?  Need to make\n\t\t//       all the executions async!\n\t\tlet messageResult = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.textContent =\n\t\t\ttypeof messageResult === 'object' ? await buildMessage(messageResult, context) :\n\t\t\tmessageResult;\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/*\n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:unless` attribute processor, excludes or\n * includes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n *\n * @author Robbie Bardijn\n */\nexport default class UnlessAttributeProcessor extends AttributeProcessor {\n\n  static NAME = 'unless';\n\n  /**\n   * Constructor, set this processor to use the `unless` name and supplied prefix.\n   *\n   * @param {String} prefix\n   */\n  constructor(prefix) {\n\n    super(prefix, UnlessAttributeProcessor.NAME);\n  }\n\n  /**\n   * Processes an element that contains a `th:unless` or `data-th-unless` attribute\n   * on it, evaluating the expression for falsey/truthy, excluding/rendering the\n   * element and its children based on the result.\n   *\n   * @param {Element} element\n   *   Element being processed.\n   * @param {String} attribute\n   *   The attribute that was encountered to invoke this processor.\n   * @param {String} attributeValue\n   *   The value given by the attribute.\n   * @param {Object} context\n   */\n  process(element, attribute, attributeValue, context) {\n\n    let expressionResult = new ExpressionProcessor().process(attributeValue, context);\n    if (expressionResult) {\n      clearChildren(element);\n      element.parentNode.removeChild(element);\n    }\n    element.removeAttribute(attribute);\n  }\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:utext` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed.\n * \n * @author Emanuel Rabina\n */\nexport default class UTextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'utext';\n\n\t/**\n\t * Constructor, set this processor to use the `utext` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, UTextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:utext` or `data-th-utext`\n\t * attribute on it, taking the text expression in the value and applying it to\n\t * the text content of the element.\n\t *\n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.innerHTML = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * `th:with`, used for creating scoped variables, useful for aliasing things.\n * \n * @author Emanuel Rabina\n */\nexport default class WithAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'with';\n\n\t/**\n\t * Constructor, set this processor to use the `with` name and supplied\n\t * prefix.\n\t *\n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, WithAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:with`/`data-th-with` attribute,\n\t * setting a variable scoped to the current element with the given name.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} `true` as adding new local variables needs to re-run\n\t *   processing.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tlet localVariables = {};\n\t\tlet aliases = new ExpressionProcessor().process(attributeValue, context);\n\t\taliases.forEach(({name, value}) => {\n\t\t\tlocalVariables[name] = value;\n\t\t});\n\t\telement.__thymeleafLocalVariables = localVariables;\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for dialects.\n * \n * @author Emanuel Rabina\n */\nexport default class Dialect {\n\n\t/**\n\t * Constructor, sets this dialect's name and optional prefix.\n\t * \n\t * @param {String} name\n\t * @param {String} [prefix]\n\t */\n\tconstructor(name, prefix) {\n\n\t\tthis.name   = name;\n\t\tthis.prefix = prefix;\n\t}\n\n\t/**\n\t * Return an object whose keys are the expression object names, the values the\n\t * expression object available properties and methods.\n\t * \n\t * @return {Object}\n\t */\n\tget expressionObjects() {\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return an array of processors.\n\t * \n\t * @return {Array}\n\t */\n\tget processors() {\n\n\t\treturn null;\n\t}\n}\n","/*\n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttrAttributeProcessor        from './processors/AttrAttributeProcessor.js';\nimport BlockElementProcessor         from './processors/BlockElementProcessor.js';\nimport CheckedAttributeProcessor     from './processors/CheckedAttributeProcessor.js';\nimport ClassAppendAttributeProcessor from './processors/ClassAppendAttributeProcessor.js';\nimport EachAttributeProcessor        from './processors/EachAttributeProcessor.js';\nimport EmptyableAttributeProcessor, {\n\tEMPTYABLE_ATTRIBUTE_NAMES\n}                                    from './processors/EmptyableAttributeProcessor.js';\nimport FragmentAttributeProcessor    from './processors/FragmentAttributeProcessor.js';\nimport IfAttributeProcessor          from './processors/IfAttributeProcessor.js';\nimport InsertAttributeProcessor      from './processors/InsertAttributeProcessor.js';\nimport RemovableAttributeProcessor, {\n\tREMOVABLE_ATTRIBUTE_NAMES\n}                                    from './processors/RemovableAttributeProcessor.js';\nimport RemoveAttributeProcessor      from './processors/RemoveAttributeProcessor.js';\nimport ReplaceAttributeProcessor     from './processors/ReplaceAttributeProcessor.js';\nimport TextAttributeProcessor        from './processors/TextAttributeProcessor.js';\nimport UnlessAttributeProcessor      from './processors/UnlessAttributeProcessor.js';\nimport UTextAttributeProcessor       from './processors/UTextAttributeProcessor.js';\nimport WithAttributeProcessor        from './processors/WithAttributeProcessor.js';\nimport Dialect                       from '../dialects/Dialect.js';\n\n/**\n * The out-of-the-box dialect for Thymeleaf, the \"Standard Dialect\".\n * \n * @author Emanuel Rabina\n */\nexport default class StandardDialect extends Dialect {\n\n\tstatic NAME           = 'Standard';\n\tstatic DEFAULT_PREFIX = 'thjs';\n\n\t/**\n\t * Create an instance of this dialect with the name \"Standard\" and\n\t * given prefix, defaulting to \"th\" if not supplied.\n\t * \n\t * @param {String} [prefix='thjs']\n\t */\n\tconstructor(prefix = StandardDialect.DEFAULT_PREFIX) {\n\n\t\tsuper(StandardDialect.NAME, prefix);\n\t}\n\n\t/**\n\t * Returns the supported standard processors.\n\t * \n\t * @return {Array} A list of the processors included in this dialect.\n\t */\n\tget processors() {\n\n\t\t// TODO: This is a very basic way of imposing the order of attribute\n\t\t//       processors.  It's currently ordered in the same way as OG\n\t\t//       Thymeleaf.  Figure out a 'proper' way to do the ordering.\n\n\t\t// Order taken from https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\n\t\tlet {prefix} = this;\n\t\treturn [\n\t\t\t// Fragment inclusion\n\t\t\tnew InsertAttributeProcessor(prefix),\n\t\t\tnew ReplaceAttributeProcessor(prefix),\n\n\t\t\t// Fragment iteration\n\t\t\tnew EachAttributeProcessor(prefix),\n\n\t\t\t// Conditional evaluation\n\t\t\tnew IfAttributeProcessor(prefix),\n\t\t\tnew UnlessAttributeProcessor(prefix),\n\n\t\t\t// Local variable definition\n\t\t\tnew WithAttributeProcessor(prefix),\n\n\t\t\t// General attribute modification\n\t\t\tnew AttrAttributeProcessor(prefix),\n\t\t\tnew ClassAppendAttributeProcessor(prefix),\n\t\t\t...EMPTYABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new EmptyableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\t\t\t...REMOVABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new RemovableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\n\t\t\t// Specific attribute modification\n\t\t\tnew CheckedAttributeProcessor(prefix),\n\n\t\t\t// Text\n\t\t\tnew TextAttributeProcessor(prefix),\n\t\t\tnew UTextAttributeProcessor(prefix),\n\n\t\t\t// Fragment specification\n\t\t\tnew FragmentAttributeProcessor(prefix),\n\n\t\t\t// Fragment removal\n\t\t\tnew RemoveAttributeProcessor(prefix),\n\n\t\t\t// Element processors\n\t\t\tnew BlockElementProcessor(prefix)\n\t\t];\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StandardDialect from './standard/StandardDialect';\n\n/**\n * Configuration object for the template engine.\n * \n * @typedef {Object} Configuration\n * @property {Array<Dialect>} dialects\n *   A list of dialects to include with this instance of the template engine.\n * @property {Object} [isomorphic]\n *   An object which configures the isomorphic capabilities of the template\n *   engine.\n * @property {Function} messageResolver\n *   A function for building a message string from some external source, given a\n *   message key and optional parameters for that particular message.\n * @property {Function} templateResolver\n *   A function for returning the text of templates named by fragment\n *   expressions in templates.  Is given only 1 argument, the template name from\n *   a fragment expression, and should return a Promise of the template text.\n */\n\n/**\n * Default configuration for the template engine, configures the standard\n * dialect with no options (uses `thjs` as the prefix).\n * \n * @type {Configuration}\n */\nexport const DEFAULT_CONFIGURATION = {\n\tdialects: [\n\t\tnew StandardDialect()\n\t]\n};\n\n/**\n * Standard configuration, configures the standard dialect with the `th` prefix\n * and enables isomorphic mode which enables the ability to use much of the same\n * processors across original Thymeleaf and ThymeleafJS.\n * \n * @type {Configuration}\n */\nexport const STANDARD_CONFIGURATION = {\n\t...DEFAULT_CONFIGURATION,\n\tdialects: [\n\t\tnew StandardDialect('th')\n\t],\n\tisomorphic: {\n\t\tprefix: 'thjs'\n\t}\n};\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from './AttributeProcessor.js';\nimport ElementProcessor   from './ElementProcessor.js';\n\n/**\n * Class for determining if an element contains a processor on it.\n */\nexport default class Matcher {\n\n\t/**\n\t * Create a matcher to work with the current context and isomorphic processing\n\t * settings.\n\t * \n\t * @param {Object} context\n\t * @param {Object} isomorphic\n\t */\n\tconstructor(context, isomorphic) {\n\n\t\tthis.context    = context;\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Return the matching attribute or element that a processor can work over.\n\t * \n\t * @param {Element} element\n\t * @param {AttributeProcessor} processor\n\t * @return {String}\n\t *   The attribute or element that matched processing by this processor, or\n\t *   `null` if no match was found.\n\t */\n\tmatches(element, processor) {\n\n\t\tlet {name} = processor;\n\n\t\t// TODO: Some way to do this generically and not have to type check?\n\n\t\t// Attribute processor matching, can be of the name prefix:name or data-prefix-name\n\t\tif (processor instanceof AttributeProcessor) {\n\t\t\tlet prefixes = [].concat(\n\t\t\t\tthis.isomorphic ? this.isomorphic.prefix : [],\n\t\t\t\tprocessor.prefix\n\t\t\t);\n\t\t\tfor (let prefix of prefixes) {\n\t\t\t\tlet attribute;\n\t\t\t\tattribute = `${prefix}:${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t\tattribute = `data-${prefix}-${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Element processor, can only be of the name prefix:name\n\t\telse if (processor instanceof ElementProcessor) {\n\t\t\tlet elementName = `${processor.prefix}:${name}`;\n\t\t\tif (element.tagName === elementName.toUpperCase()) {\n\t\t\t\treturn elementName;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Convert a standard node callback-style function into a function that returns\n * a Promise.\n * \n * @param {Function} func\n * @return {Function}\n */\nexport function promisify(func) {\n\treturn function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfunc(...arguments, (error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(new Error(result));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DEFAULT_CONFIGURATION}  from './Configurations.js';\nimport AttributeProcessor       from './processors/AttributeProcessor.js';\nimport ElementProcessor         from './processors/ElementProcessor.js';\nimport Matcher                  from './processors/Matcher.js';\nimport StandardDialect          from './standard/StandardDialect.js';\nimport {promisify}              from './utilities/Functions.js';\nimport {deserialize, serialize} from './utilities/Dom.js';\n\nconst XML_NAMESPACE_ATTRIBUTE = `xmlns:${StandardDialect.DEFAULT_PREFIX}`;\n\n/**\n * A highly-configurable class responsible for processing the Thymeleaf\n * directives found in HTML documents and fragments.\n * \n * @author Emanuel Rabina\n */\nexport default class TemplateEngine {\n\n\t/**\n\t * Constructor, set up a new template engine instance.\n\t * \n\t * @param {Object} [config=DEFAULT_CONFIGURATION]\n\t */\n\tconstructor({dialects, isomorphic, messageResolver, templateResolver} = DEFAULT_CONFIGURATION) {\n\n\t\tthis.dialects = dialects;\n\t\tthis.isomorphic = isomorphic;\n\t\tthis.messageResolver = messageResolver;\n\t\tthis.templateResolver = templateResolver;\n\n\t\t// Combine all processors into a unified list\n\t\tthis.processors = dialects.reduce((acc, {processors}) => processors ? [\n\t\t\t...acc,\n\t\t\t...processors\n\t\t] : acc, []);\n\n\t\t// Combine all expression objects into a unified object\n\t\tthis.expressionObjects = dialects.reduce((acc, {expressionObjects}) => expressionObjects ? {\n\t\t\t...acc,\n\t\t\t...expressionObjects\n\t\t} : acc, {});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template data, returning the processed template.\n\t *\n\t * @param {String} template\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocess(template, context = {}) {\n\n\t\tlet document = deserialize(template);\n\t\tlet rootElement = document.firstElementChild;\n\t\treturn this.processNode(rootElement, {\n\t\t\t...context,\n\t\t\t...this.expressionObjects,\n\t\t\tdialects:         this.dialects,\n\t\t\tmessageResolver:  this.messageResolver,\n\t\t\ttemplateResolver: this.templateResolver\n\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// TODO: Special case, remove the xmlns:th namespace from the document.\n\t\t\t\t//       This should be handled like in main Thymeleaf where it's just\n\t\t\t\t//       another processor that runs on the document.\n\t\t\t\tif (rootElement.hasAttribute(XML_NAMESPACE_ATTRIBUTE)) {\n\t\t\t\t\trootElement.removeAttribute(XML_NAMESPACE_ATTRIBUTE);\n\t\t\t\t}\n\t\t\t\treturn serialize(document);\n\t\t\t});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template at the given path, returning a promise of the\n\t * processed template.\n\t * \n\t * @param {String} filePath\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocessFile(filePath, context = {}) {\n\n\t\t/* global ENVIRONMENT */\n\t\treturn ENVIRONMENT === 'browser' ?\n\t\t\tPromise.reject(new Error('Cannot use fs.readFile inside a browser')) :\n\t\t\tpromisify(require('fs').readFile)(filePath)\n\t\t\t\t.then(data => {\n\t\t\t\t\treturn this.process(data, context);\n\t\t\t\t});\n\t}\n\n\t/**\n\t * Process a DOM element.\n\t * \n\t * @private\n\t * @param {Element} element\n\t * @param {Object} [context={}]\n\t * @return {Promise<Boolean>} Whether or not the parent node needs\n\t *   reprocessing.\n\t */\n\tasync processNode(element, context = {}) {\n\n\t\tlet localVariables = element.__thymeleafLocalVariables || {};\n\t\tlet localContext = {\n\t\t\t...context,\n\t\t\t...localVariables\n\t\t};\n\t\tlet matcher = new Matcher(localContext, this.isomorphic);\n\n\t\t// Run the current element through the gamut of registered processors.  If\n\t\t// one of them sends a reprocessing signal, return from this method to let\n\t\t// the caller re-run everything.\n\t\tfor (let i = 0; i < this.processors.length; i++) {\n\t\t\tlet processor = this.processors[i];\n\t\t\tlet processorResult = false;\n\n\t\t\t// TODO: Some way to do this generically and not have to type check?\n\t\t\tlet attributeOrElementName = matcher.matches(element, processor);\n\t\t\tif (attributeOrElementName) {\n\t\t\t\tif (processor instanceof AttributeProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, attributeOrElementName,\n\t\t\t\t\t\telement.getAttribute(attributeOrElementName), localContext);\n\t\t\t\t}\n\t\t\t\telse if (processor instanceof ElementProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, localContext);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (processorResult) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Process this element's children, handling the reprocessing signal to\n\t\t// re-run the 'current' child element (could have been shifted due to being\n\t\t// removed etc).\n\t\tfor (let i = 0; i < element.children.length; ) {\n\t\t\tlet child = element.children[i];\n\t\t\tlet reprocess = await this.processNode(child, localContext);\n\t\t\tif (!reprocess) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["AllInput","ruleName","input","parser","matchResult","parseWithExpression","exhausted","defaultMatchProcessor","result","Rule","constructor","name","expression","matchProcessor","accept","trackExpression","ThymeleafRule","contextSensitiveMatchProcessor","args","apply","Grammar","startingRule","additionalRules","rules","concat","findRuleByName","rule","find","Error","Optional","markAndClearOrReset","OneOrMore","results","push","length","OrderedChoice","expressions","Sequence","ZeroOrMore","InputBuffer","clear","lastPosition","positionStack","pop","undefined","position","mark","func","reset","read","pattern","remaining","substring","leadingWhitespace","match","RegExp","source","exec","value","startsWith","newPosition","RegularExpression","matchers","parseResults","i","parseResult","METADATA_FRAGMENT","METADATA_ITERATION","METADATA_MESSAGE","chain","context","negation","flatten","filter","link","reduce","linkContext","nextLink","messageKey","messageParameters","type","key","parameters","messageParameter","map","urlFunc","url","expressionProcessor","ExpressionProcessor","paramsList","slice","split","param","lhs","rhs","process","urlTemplate","head","placeholder","tail","paramEntry","remove","join","templateName","fragmentName","expressionsAndSeparators","item","localValueName","iterationStatusVariable","collectionExpressionAction","iterable","values","aliases","alias","replace","parseFloat","leftOperand","comparator","rightOperand","condition","truthyExpression","falseyExpression","propertyName","property","hasOwnProperty","parameterContext","methodName","method","console","warn","parametersAndSeparators","parameter","Parser","grammar","parse","inputBuffer","errorMessage","env","NODE_ENV","error","stackSize","expressionStack","toString","splice","ThymeleafExpressionLanguage","AttributeProcessor","prefix","AttrAttributeProcessor","NAME","element","attribute","attributeValue","test","forEach","attributeParts","setAttribute","escapeHtml","removeAttribute","ElementProcessor","BlockElementProcessor","parent","parentElement","firstChild","child","insertBefore","Element","__thymeleafLocalVariables","removeChild","CheckedAttributeProcessor","ClassAppendAttributeProcessor","classes","className","EachAttributeProcessor","iterationInfo","templateNode","cloneNode","localClone","appendChild","EmptyableAttributeProcessor","EMPTYABLE_ATTRIBUTE_NAMES","FragmentAttributeProcessor","clearChildren","IfAttributeProcessor","expressionResult","parentNode","parameterNames","namesAndSeparators","getThymeleafAttributeValue","processorName","getAttribute","deserialize","htmlString","ENVIRONMENT","require","jsdom","features","FetchExternalResources","ProcessExternalResources","serialize","documentFragment","serializeDocument","extractFragment","fragmentInfo","templateResolver","template","standardDialect","dialects","dialect","StandardDialect","dialectPrefix","fragmentProcessorName","$","log","InsertAttributeProcessor","fragment","fragmentSignature","FragmentSignatureGrammar","localContext","parameterName","index","RemovableAttributeProcessor","REMOVABLE_ATTRIBUTE_NAMES","RemoveAttributeProcessor","lastElementChild","firstElementChild","ReplaceAttributeProcessor","buildMessage","messageInfo","messageResolver","TextAttributeProcessor","messageResult","textContent","UnlessAttributeProcessor","UTextAttributeProcessor","innerHTML","WithAttributeProcessor","localVariables","Dialect","expressionObjects","processors","DEFAULT_PREFIX","attributeName","DEFAULT_CONFIGURATION","STANDARD_CONFIGURATION","isomorphic","Matcher","matches","processor","prefixes","hasAttribute","elementName","tagName","toUpperCase","promisify","Promise","resolve","reject","arguments","XML_NAMESPACE_ATTRIBUTE","TemplateEngine","acc","document","rootElement","processNode","then","processFile","filePath","readFile","data","matcher","processorResult","attributeOrElementName","children","reprocess"],"mappings":"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"}